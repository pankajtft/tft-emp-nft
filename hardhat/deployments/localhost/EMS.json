{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "employeeName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "skills",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "empHash",
          "type": "bytes32"
        }
      ],
      "name": "NFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        }
      ],
      "name": "burnNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "projectNumber",
          "type": "uint8"
        }
      ],
      "name": "buurnProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "startTime",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "endTime",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "team_size",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uriHash",
          "type": "bytes32"
        }
      ],
      "name": "projectAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "startTime",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "endTime",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "team_size",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "projectHash",
          "type": "bytes32"
        }
      ],
      "name": "projectEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "skills",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "skillHash",
          "type": "bytes32"
        }
      ],
      "name": "skillUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "called",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        }
      ],
      "name": "getEmployee",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFT",
      "outputs": [
        {
          "internalType": "contract EmployeeNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initilize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "employeeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "skills",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        }
      ],
      "name": "mintEmployeeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "empId",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "skills",
          "type": "string"
        }
      ],
      "name": "skillUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x352046b0609d53f05fd806683b78a3423c33455800c6d62becdf097dfbcadb20",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4050752",
    "logsBloom": "0x
    "blockHash": "0x9bdc42cae6dbb72861ff650260a56d2c4b7d2e82eef73578ed60c3cf9c5b681f",
    "transactionHash": "0x352046b0609d53f05fd806683b78a3423c33455800c6d62becdf097dfbcadb20",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4050752",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1977f36aeab796dff4b5fc1dd5b537e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"employeeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"skills\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"empHash\",\"type\":\"bytes32\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"}],\"name\":\"burnNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"projectNumber\",\"type\":\"uint8\"}],\"name\":\"buurnProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"startTime\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"endTime\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"team_size\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uriHash\",\"type\":\"bytes32\"}],\"name\":\"projectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"startTime\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"endTime\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"team_size\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"projectHash\",\"type\":\"bytes32\"}],\"name\":\"projectEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"skills\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"skillHash\",\"type\":\"bytes32\"}],\"name\":\"skillUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"called\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"}],\"name\":\"getEmployee\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFT\",\"outputs\":[{\"internalType\":\"contract EmployeeNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initilize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"employeeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"skills\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"}],\"name\":\"mintEmployeeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"empId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"skills\",\"type\":\"string\"}],\"name\":\"skillUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Anurag \",\"details\":\"Employee Management Contract allows users to create employeesNFTs and manage them\",\"kind\":\"dev\",\"methods\":{},\"title\":\"EmployeeManagementContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EMS.sol\":\"EMS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/EMS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"./NFT.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EmployeeManagementContract\\r\\n * @author Anurag \\r\\n * @dev Employee Management Contract allows users to create employeesNFTs and manage them\\r\\n */\\r\\ncontract EMS is\\r\\n    IERC721Receiver\\r\\n{\\r\\n    EmployeeNFT internal NFT;\\r\\n    address private _owner;\\r\\n    bool public called;\\r\\n    struct Employee {\\r\\n        bytes32 empDetails;\\r\\n        bytes32 skillHash;\\r\\n        bytes32[] projDetails;\\r\\n        bool[] exists;\\r\\n        uint8 currentProject;\\r\\n    }\\r\\n    event NFTMinted(\\r\\n        string employeeName,\\r\\n        string email,\\r\\n        string skills,\\r\\n        uint32 empId,\\r\\n        bytes32 empHash\\r\\n    );\\r\\n    event projectAdded(\\r\\n        string projectName,\\r\\n        string startTime,\\r\\n        string endTime,\\r\\n        uint32 empId,\\r\\n        uint8 team_size,\\r\\n        bytes32 uriHash\\r\\n    );\\r\\n    event projectEdited(\\r\\n        string projectName,\\r\\n        string startTime,\\r\\n        string endTime,\\r\\n        uint32 empId,\\r\\n        uint8 team_size,\\r\\n        bytes32 projectHash\\r\\n    );\\r\\n    event skillUpdated(uint32 empId, string skills, bytes32 skillHash);\\r\\n    event buurnProject(uint32 empId, uint8 projectNumber);\\r\\n    event burnNFT(uint32 empId);\\r\\n    mapping(uint32 => Employee) employees;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"caller is not the owner !\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validEmpId(uint32 empId) {\\r\\n        require(empId >= 100000 && empId <= 999999, \\\"emp ID must be valid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(!called);\\r\\n        called = true;\\r\\n        _;\\r\\n        called = false;\\r\\n    }\\r\\n\\r\\n    function initilize() public {\\r\\n        NFT = new EmployeeNFT();\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    //Mint new Employee\\r\\n    function mintEmployeeNFT(\\r\\n        string memory employeeName,\\r\\n        string memory email,\\r\\n        string memory skills,\\r\\n        uint32 empId\\r\\n    )\\r\\n        public\\r\\n        nonReentrant\\r\\n        onlyOwner\\r\\n        validEmpId(empId)\\r\\n    {\\r\\n        require(\\r\\n            bytes(employeeName).length > 0,\\r\\n            \\\"Employee name cannot be empty\\\"\\r\\n        );\\r\\n        require(bytes(email).length > 0, \\\"Email cannot be empty\\\");\\r\\n        require(bytes(skills).length > 0, \\\"Skills cannot be empty\\\");\\r\\n        bytes32 empHash = keccak256(\\r\\n            abi.encodePacked(employeeName, empId, email)\\r\\n        );\\r\\n        bytes32 skillHash = keccak256(abi.encodePacked(skills));\\r\\n        bytes32 uriHash = keccak256(abi.encodePacked(empHash, skillHash));\\r\\n        string memory uri = string(abi.encodePacked(uriHash));\\r\\n        NFT.safeMint(uri, empId);\\r\\n        employees[empId].empDetails = empHash;\\r\\n        employees[empId].skillHash = skillHash;\\r\\n        emit NFTMinted(employeeName, email, skills, empId, empHash);\\r\\n    }\\r\\n\\r\\n    //Update Skills\\r\\n    function skillUpdate(uint32 empId, string memory skills)\\r\\n        public\\r\\n        onlyOwner\\r\\n        validEmpId(empId)\\r\\n    {\\r\\n        require(bytes(skills).length > 0, \\\"Skills cannot be empty\\\");\\r\\n        bytes32 uriHash;\\r\\n        bytes32 skillHash = keccak256(abi.encodePacked(skills));\\r\\n        employees[empId].skillHash = skillHash;\\r\\n        if (employees[empId].projDetails.length == 0) {\\r\\n            uriHash = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    employees[empId].empDetails,\\r\\n                    employees[empId].skillHash\\r\\n                )\\r\\n            );\\r\\n        } else {\\r\\n            uriHash = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    employees[empId].empDetails,\\r\\n                    employees[empId].projDetails[\\r\\n                        employees[empId].currentProject\\r\\n                    ],\\r\\n                    employees[empId].skillHash\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        string memory uri = string(abi.encodePacked(uriHash));\\r\\n        NFT.setURI(empId, uri);\\r\\n        emit skillUpdated(empId, skills, skillHash);\\r\\n    }\\r\\n\\r\\n    //Add new Project\\r\\n    // function AddProject(\\r\\n    //     uint32 empId,\\r\\n    //     uint8 team_size,\\r\\n    //     string memory projectName,\\r\\n    //     string memory startTime, //UnixTime\\r\\n    //     string memory endTime //UnixTime\\r\\n    // ) external\\r\\n    // //  nonReentrant\\r\\n    //   onlyOwner validEmpId(empId) {\\r\\n    //     require(team_size >= 1, \\\"Invalid team size\\\");\\r\\n    //     require(bytes(projectName).length > 0, \\\"Project name cannot be empty\\\");\\r\\n    //     bytes32 projectHash = keccak256(\\r\\n    //         abi.encodePacked(projectName, startTime, endTime, team_size)\\r\\n    //     );\\r\\n    //     employees[empId].projDetails.push(projectHash);\\r\\n    //     uint8 index = uint8(employees[empId].projDetails.length - 1);\\r\\n    //     employees[empId].exists.push(true);\\r\\n    //     setcurrentProject(empId, index);\\r\\n    //     bytes32 uriHash = keccak256(\\r\\n    //         abi.encodePacked(\\r\\n    //             employees[empId].empDetails,\\r\\n    //             employees[empId].projDetails[index],\\r\\n    //             employees[empId].skillHash\\r\\n    //         )\\r\\n    //     );\\r\\n    //     string memory uri = string(abi.encodePacked(uriHash));\\r\\n    //     NFT.setURI(empId, uri);\\r\\n    //     emit projectAdded(\\r\\n    //         projectName,\\r\\n    //         startTime,\\r\\n    //         endTime,\\r\\n    //         empId,\\r\\n    //         team_size,\\r\\n    //         uriHash\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    // //Get Current Project\\r\\n    // function getcurrentProject(uint32 empId)\\r\\n    //     external\\r\\n    //     view\\r\\n    //     onlyOwner\\r\\n    //     validEmpId(empId)\\r\\n    //     returns (uint8)\\r\\n    // {\\r\\n    //     return employees[empId].currentProject;\\r\\n    // }\\r\\n\\r\\n    // //Set Current Project\\r\\n    // function setcurrentProject(uint32 empId, uint8 projectID)\\r\\n    //     public\\r\\n    //     onlyOwner\\r\\n    //     validEmpId(empId)\\r\\n    // {\\r\\n    //     // require(\\r\\n    //     //     employees[empId].currentProject == uint8(0),\\r\\n    //     //     \\\"Current project is already set\\\"\\r\\n    //     // );\\r\\n    //     require(\\r\\n    //         projectID + 1 <= employees[empId].projDetails.length,\\r\\n    //         \\\"Invalid project ID\\\"\\r\\n    //     );\\r\\n    //     require(employees[empId].exists[projectID], \\\"Project not exists\\\");\\r\\n    //     employees[empId].currentProject = projectID;\\r\\n    //     bytes32 uriHash = keccak256(\\r\\n    //         abi.encodePacked(\\r\\n    //             employees[empId].empDetails,\\r\\n    //             employees[empId].projDetails[projectID],\\r\\n    //             employees[empId].skillHash\\r\\n    //         )\\r\\n    //     );\\r\\n    //     string memory uri = string(abi.encodePacked(uriHash));\\r\\n    //     NFT.setURI(empId, uri);\\r\\n    // }\\r\\n\\r\\n    // //Edit project\\r\\n    // function editProject(\\r\\n    //     uint32 empId,\\r\\n    //     uint8 team_size,\\r\\n    //     string memory projectName,\\r\\n    //     string memory startTime, //UnixTime\\r\\n    //     string memory endTime, //UnixTime\\r\\n    //     uint8 projectNumber\\r\\n    // ) external onlyOwner validEmpId(empId) {\\r\\n    //     require(team_size >= 1 && team_size <= 10, \\\"Invalid team size\\\");\\r\\n    //     require(bytes(projectName).length > 0, \\\"Project name cannot be empty\\\");\\r\\n    //     require(employees[empId].exists[projectNumber], \\\"Project not exists\\\");\\r\\n    //     // require(\\r\\n    //     //     projectNumber < employees[empId].projDetails.length,\\r\\n    //     //     \\\"Invalid project ID\\\"\\r\\n    //     // );\\r\\n    //     bytes32 projectHash = keccak256(\\r\\n    //         abi.encodePacked(projectName, startTime, endTime, team_size)\\r\\n    //     );\\r\\n    //     employees[empId].projDetails[projectNumber] = projectHash;\\r\\n    //     emit projectEdited(\\r\\n    //         projectName,\\r\\n    //         startTime,\\r\\n    //         endTime,\\r\\n    //         empId,\\r\\n    //         team_size,\\r\\n    //         projectHash\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    // //Get All Projects Hash\\r\\n    // function getAllProject(uint32 empId)\\r\\n    //     public\\r\\n    //     view\\r\\n    //     onlyOwner\\r\\n    //     validEmpId(empId)\\r\\n    //     returns (bytes32[] memory)\\r\\n    // {\\r\\n    //     return employees[empId].projDetails;\\r\\n    // }\\r\\n\\r\\n    // //Return empId\\r\\n    // // function returnToken() internal view returns (uint16) {\\r\\n    // //     uint256 empId = NFT._empIdCounter();\\r\\n    // //     return (uint16(empId) - 1);\\r\\n    // // }\\r\\n    //Overrides\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    // function burnProject(uint32 empId, uint8 projectID)\\r\\n    //     public\\r\\n    //     onlyOwner\\r\\n    //     validEmpId(empId)\\r\\n    // {\\r\\n    //     require(\\r\\n    //         projectID < employees[empId].projDetails.length,\\r\\n    //         \\\"Invalid project ID\\\"\\r\\n    //     );\\r\\n    //     require(employees[empId].exists[projectID], \\\"Project not exists\\\");\\r\\n    //     employees[empId].projDetails[projectID] = \\\"\\\";\\r\\n    //     employees[empId].exists[projectID] = false;\\r\\n    //     emit buurnProject(empId, projectID);\\r\\n    // }\\r\\n\\r\\n    // //burn\\r\\n    // function burn(uint32 empId) public virtual onlyOwner validEmpId(empId) {\\r\\n    //     delete employees[empId];\\r\\n    //     NFT.burn(empId);\\r\\n    //     emit burnNFT(empId);\\r\\n    // }\\r\\n\\r\\n    // //Pure/View Functions\\r\\n    function getNFT() public view onlyOwner returns (EmployeeNFT) {\\r\\n        return NFT;\\r\\n    }\\r\\n\\r\\n    function getEmployee(uint32 empId) public view returns (bytes32) {\\r\\n        Employee storage employee = employees[empId];\\r\\n        return (employee.empDetails);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35fd909ae2ed7bd9f2ba076718e36d4b434f132ab4ef9058c28b9352da06d7e4\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\n// import \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\ncontract EmployeeNFT is ERC721, ERC721URIStorage{\\r\\n    address private _owner;\\r\\n    // using Counters for Counters.Counter;\\r\\n    // Counters.Counter public _tokenIdCounter;\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"caller is not the owner !\\\");\\r\\n        _;\\r\\n    }\\r\\n    constructor() ERC721(\\\"EMS\\\", \\\"TFT\\\") {\\r\\n        _owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // function updateOwner(address )\\r\\n    function safeMint(string memory uri, uint32 empID)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        // uint16 tokenId = uint16(_tokenIdCounter.current());\\r\\n        // _tokenIdCounter.increment();\\r\\n        _safeMint(msg.sender, empID);\\r\\n        _setTokenURI(empID, uri);\\r\\n    }\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256, /* firstTokenId */\\r\\n        uint256 /* batchSize */\\r\\n    ) internal virtual override {\\r\\n        require(\\r\\n            from == address(0) || to == address(0),\\r\\n            \\\"You can't transfer this NFT\\\"\\r\\n        );\\r\\n    }\\r\\n    function burn(uint32 empID) external onlyOwner {\\r\\n        _burn(uint256(empID));\\r\\n    }\\r\\n    // The following functions are overrides required by Solidity.\\r\\n    function _burn(uint256 empId)\\r\\n        internal\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        super._burn(empId);\\r\\n    }\\r\\n    function tokenURI(uint256 empId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(empId);\\r\\n    }\\r\\n    //Setting the URI of the token (onlyOwner)\\r\\n    function setURI(uint32 empId, string memory uri) external onlyOwner {\\r\\n        _setTokenURI(uint256(empId), uri);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x596649917f232fb0b81c373965e7ef6ec24e989b2416fddc4788f01ea91c3ca1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506148bc806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063780ab03a1162000063578063780ab03a146200010557806388a6360e146200013b578063a70945f7146200015d578063df91132f146200017d5762000088565b8063150b7a02146200008d5780634c545f6414620000c357806350f9b6cd14620000e3575b600080fd5b620000ab6004803603810190620000a5919062000c95565b62000189565b604051620000ba919062000d68565b60405180910390f35b620000e16004803603810190620000db919062000f23565b6200019e565b005b620000ed620005bc565b604051620000fc919062000fa6565b60405180910390f35b6200012360048036038101906200011d919062000fc3565b620005cf565b60405162000132919062001010565b60405180910390f35b6200014562000600565b60405162000154919062001098565b60405180910390f35b6200017b6004803603810190620001759190620010b5565b620006bb565b005b6200018762000ab7565b005b600063150b7a0260e01b905095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000231576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022890620011e5565b60405180910390fd5b81620186a08163ffffffff1610158015620002555750620f423f8163ffffffff1611155b62000297576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028e9062001257565b60405180910390fd5b6000825111620002de576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002d590620012c9565b60405180910390fd5b60008083604051602001620002f491906200136e565b60405160208183030381529060405280519060200120905080600260008763ffffffff1663ffffffff168152602001908152602001600020600101819055506000600260008763ffffffff1663ffffffff168152602001908152602001600020600201805490501415620003d957600260008663ffffffff1663ffffffff16815260200190815260200160002060000154600260008763ffffffff1663ffffffff16815260200190815260200160002060010154604051602001620003bb929190620013ac565b604051602081830303815290604052805190602001209150620004c0565b600260008663ffffffff1663ffffffff16815260200190815260200160002060000154600260008763ffffffff1663ffffffff168152602001908152602001600020600201600260008863ffffffff1663ffffffff16815260200190815260200160002060040160009054906101000a900460ff1660ff1681548110620004655762000464620013dc565b5b9060005260206000200154600260008863ffffffff1663ffffffff16815260200190815260200160002060010154604051602001620004a7939291906200140b565b6040516020818303038152906040528051906020012091505b600082604051602001620004d591906200144e565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c52dc9e587836040518363ffffffff1660e01b815260040162000543929190620014bd565b600060405180830381600087803b1580156200055e57600080fd5b505af115801562000573573d6000803e3d6000fd5b505050507f56225485ea8cf135b63802c3117f6bcd23c3719b613678d073bc6755e040faf4868684604051620005ac93929190620014f1565b60405180910390a1505050505050565b600160149054906101000a900460ff1681565b600080600260008463ffffffff1663ffffffff16815260200190815260200160002090508060000154915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000695576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200068c90620011e5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160149054906101000a900460ff1615620006d657600080fd5b60018060146101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000783576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200077a90620011e5565b60405180910390fd5b80620186a08163ffffffff1610158015620007a75750620f423f8163ffffffff1611155b620007e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007e09062001257565b60405180910390fd5b600085511162000830576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008279062001585565b60405180910390fd5b600084511162000877576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200086e90620015f7565b60405180910390fd5b6000835111620008be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008b590620012c9565b60405180910390fd5b6000858386604051602001620008d79392919062001655565b6040516020818303038152906040528051906020012090506000846040516020016200090491906200136e565b6040516020818303038152906040528051906020012090506000828260405160200162000933929190620013ac565b6040516020818303038152906040528051906020012090506000816040516020016200096091906200144e565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3d33a4d82886040518363ffffffff1660e01b8152600401620009ce92919062001690565b600060405180830381600087803b158015620009e957600080fd5b505af1158015620009fe573d6000803e3d6000fd5b5050505083600260008863ffffffff1663ffffffff1681526020019081526020016000206000018190555082600260008863ffffffff1663ffffffff168152602001908152602001600020600101819055507f2db2c64ddd4e168db23dae994aaf6edb39fe185838e9179fb447641c51b761eb898989898860405162000a89959493929190620016c4565b60405180910390a150505050506000600160146101000a81548160ff02191690831515021790555050505050565b60405162000ac59062000b65565b604051809103906000f08015801562000ae2573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b613150806200173783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000bb48262000b87565b9050919050565b62000bc68162000ba7565b811462000bd257600080fd5b50565b60008135905062000be68162000bbb565b92915050565b6000819050919050565b62000c018162000bec565b811462000c0d57600080fd5b50565b60008135905062000c218162000bf6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011262000c4f5762000c4e62000c27565b5b8235905067ffffffffffffffff81111562000c6f5762000c6e62000c2c565b5b60208301915083600182028301111562000c8e5762000c8d62000c31565b5b9250929050565b60008060008060006080868803121562000cb45762000cb362000b7d565b5b600062000cc48882890162000bd5565b955050602062000cd78882890162000bd5565b945050604062000cea8882890162000c10565b935050606086013567ffffffffffffffff81111562000d0e5762000d0d62000b82565b5b62000d1c8882890162000c36565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b62000d628162000d2b565b82525050565b600060208201905062000d7f600083018462000d57565b92915050565b600063ffffffff82169050919050565b62000da08162000d85565b811462000dac57600080fd5b50565b60008135905062000dc08162000d95565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000e168262000dcb565b810181811067ffffffffffffffff8211171562000e385762000e3762000ddc565b5b80604052505050565b600062000e4d62000b73565b905062000e5b828262000e0b565b919050565b600067ffffffffffffffff82111562000e7e5762000e7d62000ddc565b5b62000e898262000dcb565b9050602081019050919050565b82818337600083830152505050565b600062000ebc62000eb68462000e60565b62000e41565b90508281526020810184848401111562000edb5762000eda62000dc6565b5b62000ee884828562000e96565b509392505050565b600082601f83011262000f085762000f0762000c27565b5b813562000f1a84826020860162000ea5565b91505092915050565b6000806040838503121562000f3d5762000f3c62000b7d565b5b600062000f4d8582860162000daf565b925050602083013567ffffffffffffffff81111562000f715762000f7062000b82565b5b62000f7f8582860162000ef0565b9150509250929050565b60008115159050919050565b62000fa08162000f89565b82525050565b600060208201905062000fbd600083018462000f95565b92915050565b60006020828403121562000fdc5762000fdb62000b7d565b5b600062000fec8482850162000daf565b91505092915050565b6000819050919050565b6200100a8162000ff5565b82525050565b600060208201905062001027600083018462000fff565b92915050565b6000819050919050565b600062001058620010526200104c8462000b87565b6200102d565b62000b87565b9050919050565b60006200106c8262001037565b9050919050565b600062001080826200105f565b9050919050565b620010928162001073565b82525050565b6000602082019050620010af600083018462001087565b92915050565b60008060008060808587031215620010d257620010d162000b7d565b5b600085013567ffffffffffffffff811115620010f357620010f262000b82565b5b620011018782880162000ef0565b945050602085013567ffffffffffffffff81111562001125576200112462000b82565b5b620011338782880162000ef0565b935050604085013567ffffffffffffffff81111562001157576200115662000b82565b5b620011658782880162000ef0565b9250506060620011788782880162000daf565b91505092959194509250565b600082825260208201905092915050565b7f63616c6c6572206973206e6f7420746865206f776e6572202100000000000000600082015250565b6000620011cd60198362001184565b9150620011da8262001195565b602082019050919050565b600060208201905081810360008301526200120081620011be565b9050919050565b7f656d70204944206d7573742062652076616c6964000000000000000000000000600082015250565b60006200123f60148362001184565b91506200124c8262001207565b602082019050919050565b60006020820190508181036000830152620012728162001230565b9050919050565b7f536b696c6c732063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000620012b160168362001184565b9150620012be8262001279565b602082019050919050565b60006020820190508181036000830152620012e481620012a2565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156200132157808201518184015260208101905062001304565b8381111562001331576000848401525b50505050565b60006200134482620012eb565b620013508185620012f6565b93506200136281856020860162001301565b80840191505092915050565b60006200137c828462001337565b915081905092915050565b6000819050919050565b620013a6620013a08262000ff5565b62001387565b82525050565b6000620013ba828562001391565b602082019150620013cc828462001391565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062001419828662001391565b6020820191506200142b828562001391565b6020820191506200143d828462001391565b602082019150819050949350505050565b60006200145c828462001391565b60208201915081905092915050565b620014768162000d85565b82525050565b60006200148982620012eb565b62001495818562001184565b9350620014a781856020860162001301565b620014b28162000dcb565b840191505092915050565b6000604082019050620014d460008301856200146b565b8181036020830152620014e881846200147c565b90509392505050565b60006060820190506200150860008301866200146b565b81810360208301526200151c81856200147c565b90506200152d604083018462000fff565b949350505050565b7f456d706c6f796565206e616d652063616e6e6f7420626520656d707479000000600082015250565b60006200156d601d8362001184565b91506200157a8262001535565b602082019050919050565b60006020820190508181036000830152620015a0816200155e565b9050919050565b7f456d61696c2063616e6e6f7420626520656d7074790000000000000000000000600082015250565b6000620015df60158362001184565b9150620015ec82620015a7565b602082019050919050565b600060208201905081810360008301526200161281620015d0565b9050919050565b60008160e01b9050919050565b6000620016338262001619565b9050919050565b6200164f620016498262000d85565b62001626565b82525050565b600062001663828662001337565b91506200167182856200163a565b60048201915062001683828462001337565b9150819050949350505050565b60006040820190508181036000830152620016ac81856200147c565b9050620016bd60208301846200146b565b9392505050565b600060a0820190508181036000830152620016e081886200147c565b90508181036020830152620016f681876200147c565b905081810360408301526200170c81866200147c565b90506200171d60608301856200146b565b6200172c608083018462000fff565b969550505050505056fe60806040523480156200001157600080fd5b506040518060400160405280600381526020017f454d5300000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f5446540000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000f9565b508060019080519060200190620000af929190620000f9565b50505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200020e565b8280546200010790620001d8565b90600052602060002090601f0160209004810192826200012b576000855562000177565b82601f106200014657805160ff191683800117855562000177565b8280016001018555821562000177579182015b828111156200017657825182559160200191906001019062000159565b5b5090506200018691906200018a565b5090565b5b80821115620001a55760008160009055506001016200018b565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001f157607f821691505b60208210811415620002085762000207620001a9565b5b50919050565b612f32806200021e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637a5984c411610097578063b88d4fde11610066578063b88d4fde146102a9578063c52dc9e5146102c5578063c87b56dd146102e1578063e985e9c51461031157610100565b80637a5984c41461023757806395d89b4114610253578063a22cb46514610271578063a3d33a4d1461028d57610100565b806323b872dd116100d357806323b872dd1461019f57806342842e0e146101bb5780636352211e146101d757806370a082311461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190611ef8565b610341565b60405161012c9190611f40565b60405180910390f35b61013d610423565b60405161014a9190611ff4565b60405180910390f35b61016d6004803603810190610168919061204c565b6104b5565b60405161017a91906120ba565b60405180910390f35b61019d60048036038101906101989190612101565b6104fb565b005b6101b960048036038101906101b49190612141565b610613565b005b6101d560048036038101906101d09190612141565b610673565b005b6101f160048036038101906101ec919061204c565b610693565b6040516101fe91906120ba565b60405180910390f35b610221600480360381019061021c9190612194565b61071a565b60405161022e91906121d0565b60405180910390f35b610251600480360381019061024c9190612227565b6107d2565b005b61025b610874565b6040516102689190611ff4565b60405180910390f35b61028b60048036038101906102869190612280565b610906565b005b6102a760048036038101906102a291906123f5565b61091c565b005b6102c360048036038101906102be91906124f2565b6109d0565b005b6102df60048036038101906102da9190612575565b610a32565b005b6102fb60048036038101906102f6919061204c565b610ad6565b6040516103089190611ff4565b60405180910390f35b61032b600480360381019061032691906125d1565b610ae8565b6040516103389190611f40565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061041c575061041b82610b7c565b5b9050919050565b60606000805461043290612640565b80601f016020809104026020016040519081016040528092919081815260200182805461045e90612640565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050905090565b60006104c082610be6565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061050682610693565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e906126e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610596610c31565b73ffffffffffffffffffffffffffffffffffffffff1614806105c557506105c4816105bf610c31565b610ae8565b5b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb90612776565b60405180910390fd5b61060e8383610c39565b505050565b61062461061e610c31565b82610cf2565b610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a90612808565b60405180910390fd5b61066e838383610d87565b505050565b61068e838383604051806020016040528060008152506109d0565b505050565b60008061069f83611081565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890612874565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561078b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078290612906565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990612972565b60405180910390fd5b6108718163ffffffff166110be565b50565b60606001805461088390612640565b80601f01602080910402602001604051908101604052809291908181526020018280546108af90612640565b80156108fc5780601f106108d1576101008083540402835291602001916108fc565b820191906000526020600020905b8154815290600101906020018083116108df57829003601f168201915b5050505050905090565b610918610911610c31565b83836110ca565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390612972565b60405180910390fd5b6109bc338263ffffffff16611237565b6109cc8163ffffffff1683611255565b5050565b6109e16109db610c31565b83610cf2565b610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1790612808565b60405180910390fd5b610a2c848484846112c9565b50505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990612972565b60405180910390fd5b610ad28263ffffffff1682611255565b5050565b6060610ae182611325565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bef81611438565b610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590612874565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610cac83610693565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610cfe83610693565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d405750610d3f8185610ae8565b5b80610d7e57508373ffffffffffffffffffffffffffffffffffffffff16610d66846104b5565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610da782610693565b73ffffffffffffffffffffffffffffffffffffffff1614610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490612a04565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6490612a96565b60405180910390fd5b610e7a8383836001611479565b8273ffffffffffffffffffffffffffffffffffffffff16610e9a82610693565b73ffffffffffffffffffffffffffffffffffffffff1614610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790612a04565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461107c8383836001611525565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6110c78161152b565b50565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611139576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113090612b02565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161122a9190611f40565b60405180910390a3505050565b61125182826040518060200160405280600081525061157e565b5050565b61125e82611438565b61129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129490612b94565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906112c4929190611da9565b505050565b6112d4848484610d87565b6112e0848484846115d9565b61131f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131690612c26565b60405180910390fd5b50505050565b606061133082610be6565b600060066000848152602001908152602001600020805461135090612640565b80601f016020809104026020016040519081016040528092919081815260200182805461137c90612640565b80156113c95780601f1061139e576101008083540402835291602001916113c9565b820191906000526020600020905b8154815290600101906020018083116113ac57829003601f168201915b5050505050905060006113da611770565b90506000815114156113f0578192505050611433565b60008251111561142557808260405160200161140d929190612c82565b60405160208183030381529060405292505050611433565b61142e84611787565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661145a83611081565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114e05750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b61151f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151690612cf2565b60405180910390fd5b50505050565b50505050565b611534816117ef565b600060066000838152602001908152602001600020805461155490612640565b90501461157b5760066000828152602001908152602001600020600061157a9190611e2f565b5b50565b611588838361193d565b61159560008484846115d9565b6115d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cb90612c26565b60405180910390fd5b505050565b60006115fa8473ffffffffffffffffffffffffffffffffffffffff16611b5b565b15611763578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611623610c31565b8786866040518563ffffffff1660e01b81526004016116459493929190612d67565b602060405180830381600087803b15801561165f57600080fd5b505af192505050801561169057506040513d601f19601f8201168201806040525081019061168d9190612dc8565b60015b611713573d80600081146116c0576040519150601f19603f3d011682016040523d82523d6000602084013e6116c5565b606091505b5060008151141561170b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170290612c26565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611768565b600190505b949350505050565b606060405180602001604052806000815250905090565b606061179282610be6565b600061179c611770565b905060008151116117bc57604051806020016040528060008152506117e7565b806117c684611b7e565b6040516020016117d7929190612c82565b6040516020818303038152906040525b915050919050565b60006117fa82610693565b905061180a816000846001611479565b61181382610693565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611939816000846001611525565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a490612e41565b60405180910390fd5b6119b681611438565b156119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed90612ead565b60405180910390fd5b611a04600083836001611479565b611a0d81611438565b15611a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4490612ead565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b57600083836001611525565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001611b8d84611c56565b01905060008167ffffffffffffffff811115611bac57611bab6122ca565b5b6040519080825280601f01601f191660200182016040528015611bde5781602001600182028036833780820191505090505b509050600082602001820190505b600115611c4b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c3557611c34612ecd565b5b0494506000851415611c4657611c4b565b611bec565b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611cb4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611caa57611ca9612ecd565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611cf1576d04ee2d6d415b85acef81000000008381611ce757611ce6612ecd565b5b0492506020810190505b662386f26fc100008310611d2057662386f26fc100008381611d1657611d15612ecd565b5b0492506010810190505b6305f5e1008310611d49576305f5e1008381611d3f57611d3e612ecd565b5b0492506008810190505b6127108310611d6e576127108381611d6457611d63612ecd565b5b0492506004810190505b60648310611d915760648381611d8757611d86612ecd565b5b0492506002810190505b600a8310611da0576001810190505b80915050919050565b828054611db590612640565b90600052602060002090601f016020900481019282611dd75760008555611e1e565b82601f10611df057805160ff1916838001178555611e1e565b82800160010185558215611e1e579182015b82811115611e1d578251825591602001919060010190611e02565b5b509050611e2b9190611e6f565b5090565b508054611e3b90612640565b6000825580601f10611e4d5750611e6c565b601f016020900490600052602060002090810190611e6b9190611e6f565b5b50565b5b80821115611e88576000816000905550600101611e70565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ed581611ea0565b8114611ee057600080fd5b50565b600081359050611ef281611ecc565b92915050565b600060208284031215611f0e57611f0d611e96565b5b6000611f1c84828501611ee3565b91505092915050565b60008115159050919050565b611f3a81611f25565b82525050565b6000602082019050611f556000830184611f31565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f95578082015181840152602081019050611f7a565b83811115611fa4576000848401525b50505050565b6000601f19601f8301169050919050565b6000611fc682611f5b565b611fd08185611f66565b9350611fe0818560208601611f77565b611fe981611faa565b840191505092915050565b6000602082019050818103600083015261200e8184611fbb565b905092915050565b6000819050919050565b61202981612016565b811461203457600080fd5b50565b60008135905061204681612020565b92915050565b60006020828403121561206257612061611e96565b5b600061207084828501612037565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120a482612079565b9050919050565b6120b481612099565b82525050565b60006020820190506120cf60008301846120ab565b92915050565b6120de81612099565b81146120e957600080fd5b50565b6000813590506120fb816120d5565b92915050565b6000806040838503121561211857612117611e96565b5b6000612126858286016120ec565b925050602061213785828601612037565b9150509250929050565b60008060006060848603121561215a57612159611e96565b5b6000612168868287016120ec565b9350506020612179868287016120ec565b925050604061218a86828701612037565b9150509250925092565b6000602082840312156121aa576121a9611e96565b5b60006121b8848285016120ec565b91505092915050565b6121ca81612016565b82525050565b60006020820190506121e560008301846121c1565b92915050565b600063ffffffff82169050919050565b612204816121eb565b811461220f57600080fd5b50565b600081359050612221816121fb565b92915050565b60006020828403121561223d5761223c611e96565b5b600061224b84828501612212565b91505092915050565b61225d81611f25565b811461226857600080fd5b50565b60008135905061227a81612254565b92915050565b6000806040838503121561229757612296611e96565b5b60006122a5858286016120ec565b92505060206122b68582860161226b565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61230282611faa565b810181811067ffffffffffffffff82111715612321576123206122ca565b5b80604052505050565b6000612334611e8c565b905061234082826122f9565b919050565b600067ffffffffffffffff8211156123605761235f6122ca565b5b61236982611faa565b9050602081019050919050565b82818337600083830152505050565b600061239861239384612345565b61232a565b9050828152602081018484840111156123b4576123b36122c5565b5b6123bf848285612376565b509392505050565b600082601f8301126123dc576123db6122c0565b5b81356123ec848260208601612385565b91505092915050565b6000806040838503121561240c5761240b611e96565b5b600083013567ffffffffffffffff81111561242a57612429611e9b565b5b612436858286016123c7565b925050602061244785828601612212565b9150509250929050565b600067ffffffffffffffff82111561246c5761246b6122ca565b5b61247582611faa565b9050602081019050919050565b600061249561249084612451565b61232a565b9050828152602081018484840111156124b1576124b06122c5565b5b6124bc848285612376565b509392505050565b600082601f8301126124d9576124d86122c0565b5b81356124e9848260208601612482565b91505092915050565b6000806000806080858703121561250c5761250b611e96565b5b600061251a878288016120ec565b945050602061252b878288016120ec565b935050604061253c87828801612037565b925050606085013567ffffffffffffffff81111561255d5761255c611e9b565b5b612569878288016124c4565b91505092959194509250565b6000806040838503121561258c5761258b611e96565b5b600061259a85828601612212565b925050602083013567ffffffffffffffff8111156125bb576125ba611e9b565b5b6125c7858286016123c7565b9150509250929050565b600080604083850312156125e8576125e7611e96565b5b60006125f6858286016120ec565b9250506020612607858286016120ec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265857607f821691505b6020821081141561266c5761266b612611565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126ce602183611f66565b91506126d982612672565b604082019050919050565b600060208201905081810360008301526126fd816126c1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612760603d83611f66565b915061276b82612704565b604082019050919050565b6000602082019050818103600083015261278f81612753565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006127f2602d83611f66565b91506127fd82612796565b604082019050919050565b60006020820190508181036000830152612821816127e5565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061285e601883611f66565b915061286982612828565b602082019050919050565b6000602082019050818103600083015261288d81612851565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006128f0602983611f66565b91506128fb82612894565b604082019050919050565b6000602082019050818103600083015261291f816128e3565b9050919050565b7f63616c6c6572206973206e6f7420746865206f776e6572202100000000000000600082015250565b600061295c601983611f66565b915061296782612926565b602082019050919050565b6000602082019050818103600083015261298b8161294f565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006129ee602583611f66565b91506129f982612992565b604082019050919050565b60006020820190508181036000830152612a1d816129e1565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a80602483611f66565b9150612a8b82612a24565b604082019050919050565b60006020820190508181036000830152612aaf81612a73565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612aec601983611f66565b9150612af782612ab6565b602082019050919050565b60006020820190508181036000830152612b1b81612adf565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612b7e602e83611f66565b9150612b8982612b22565b604082019050919050565b60006020820190508181036000830152612bad81612b71565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612c10603283611f66565b9150612c1b82612bb4565b604082019050919050565b60006020820190508181036000830152612c3f81612c03565b9050919050565b600081905092915050565b6000612c5c82611f5b565b612c668185612c46565b9350612c76818560208601611f77565b80840191505092915050565b6000612c8e8285612c51565b9150612c9a8284612c51565b91508190509392505050565b7f596f752063616e2774207472616e736665722074686973204e46540000000000600082015250565b6000612cdc601b83611f66565b9150612ce782612ca6565b602082019050919050565b60006020820190508181036000830152612d0b81612ccf565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612d3982612d12565b612d438185612d1d565b9350612d53818560208601611f77565b612d5c81611faa565b840191505092915050565b6000608082019050612d7c60008301876120ab565b612d8960208301866120ab565b612d9660408301856121c1565b8181036060830152612da88184612d2e565b905095945050505050565b600081519050612dc281611ecc565b92915050565b600060208284031215612dde57612ddd611e96565b5b6000612dec84828501612db3565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612e2b602083611f66565b9150612e3682612df5565b602082019050919050565b60006020820190508181036000830152612e5a81612e1e565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612e97601c83611f66565b9150612ea282612e61565b602082019050919050565b60006020820190508181036000830152612ec681612e8a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220010be01d87f108247e16184cf730edad903897c8bd8b8685b0b8e2cb27df740f64736f6c63430008090033a26469706673582212202903497899ec0a05ad0a9df07ec18487c896a2825e2c2b33e8f28bd9a861f09564736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063780ab03a1162000063578063780ab03a146200010557806388a6360e146200013b578063a70945f7146200015d578063df91132f146200017d5762000088565b8063150b7a02146200008d5780634c545f6414620000c357806350f9b6cd14620000e3575b600080fd5b620000ab6004803603810190620000a5919062000c95565b62000189565b604051620000ba919062000d68565b60405180910390f35b620000e16004803603810190620000db919062000f23565b6200019e565b005b620000ed620005bc565b604051620000fc919062000fa6565b60405180910390f35b6200012360048036038101906200011d919062000fc3565b620005cf565b60405162000132919062001010565b60405180910390f35b6200014562000600565b60405162000154919062001098565b60405180910390f35b6200017b6004803603810190620001759190620010b5565b620006bb565b005b6200018762000ab7565b005b600063150b7a0260e01b905095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000231576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022890620011e5565b60405180910390fd5b81620186a08163ffffffff1610158015620002555750620f423f8163ffffffff1611155b62000297576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028e9062001257565b60405180910390fd5b6000825111620002de576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002d590620012c9565b60405180910390fd5b60008083604051602001620002f491906200136e565b60405160208183030381529060405280519060200120905080600260008763ffffffff1663ffffffff168152602001908152602001600020600101819055506000600260008763ffffffff1663ffffffff168152602001908152602001600020600201805490501415620003d957600260008663ffffffff1663ffffffff16815260200190815260200160002060000154600260008763ffffffff1663ffffffff16815260200190815260200160002060010154604051602001620003bb929190620013ac565b604051602081830303815290604052805190602001209150620004c0565b600260008663ffffffff1663ffffffff16815260200190815260200160002060000154600260008763ffffffff1663ffffffff168152602001908152602001600020600201600260008863ffffffff1663ffffffff16815260200190815260200160002060040160009054906101000a900460ff1660ff1681548110620004655762000464620013dc565b5b9060005260206000200154600260008863ffffffff1663ffffffff16815260200190815260200160002060010154604051602001620004a7939291906200140b565b6040516020818303038152906040528051906020012091505b600082604051602001620004d591906200144e565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c52dc9e587836040518363ffffffff1660e01b815260040162000543929190620014bd565b600060405180830381600087803b1580156200055e57600080fd5b505af115801562000573573d6000803e3d6000fd5b505050507f56225485ea8cf135b63802c3117f6bcd23c3719b613678d073bc6755e040faf4868684604051620005ac93929190620014f1565b60405180910390a1505050505050565b600160149054906101000a900460ff1681565b600080600260008463ffffffff1663ffffffff16815260200190815260200160002090508060000154915050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000695576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200068c90620011e5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160149054906101000a900460ff1615620006d657600080fd5b60018060146101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000783576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200077a90620011e5565b60405180910390fd5b80620186a08163ffffffff1610158015620007a75750620f423f8163ffffffff1611155b620007e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007e09062001257565b60405180910390fd5b600085511162000830576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008279062001585565b60405180910390fd5b600084511162000877576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200086e90620015f7565b60405180910390fd5b6000835111620008be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008b590620012c9565b60405180910390fd5b6000858386604051602001620008d79392919062001655565b6040516020818303038152906040528051906020012090506000846040516020016200090491906200136e565b6040516020818303038152906040528051906020012090506000828260405160200162000933929190620013ac565b6040516020818303038152906040528051906020012090506000816040516020016200096091906200144e565b604051602081830303815290604052905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a3d33a4d82886040518363ffffffff1660e01b8152600401620009ce92919062001690565b600060405180830381600087803b158015620009e957600080fd5b505af1158015620009fe573d6000803e3d6000fd5b5050505083600260008863ffffffff1663ffffffff1681526020019081526020016000206000018190555082600260008863ffffffff1663ffffffff168152602001908152602001600020600101819055507f2db2c64ddd4e168db23dae994aaf6edb39fe185838e9179fb447641c51b761eb898989898860405162000a89959493929190620016c4565b60405180910390a150505050506000600160146101000a81548160ff02191690831515021790555050505050565b60405162000ac59062000b65565b604051809103906000f08015801562000ae2573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b613150806200173783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000bb48262000b87565b9050919050565b62000bc68162000ba7565b811462000bd257600080fd5b50565b60008135905062000be68162000bbb565b92915050565b6000819050919050565b62000c018162000bec565b811462000c0d57600080fd5b50565b60008135905062000c218162000bf6565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011262000c4f5762000c4e62000c27565b5b8235905067ffffffffffffffff81111562000c6f5762000c6e62000c2c565b5b60208301915083600182028301111562000c8e5762000c8d62000c31565b5b9250929050565b60008060008060006080868803121562000cb45762000cb362000b7d565b5b600062000cc48882890162000bd5565b955050602062000cd78882890162000bd5565b945050604062000cea8882890162000c10565b935050606086013567ffffffffffffffff81111562000d0e5762000d0d62000b82565b5b62000d1c8882890162000c36565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b62000d628162000d2b565b82525050565b600060208201905062000d7f600083018462000d57565b92915050565b600063ffffffff82169050919050565b62000da08162000d85565b811462000dac57600080fd5b50565b60008135905062000dc08162000d95565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000e168262000dcb565b810181811067ffffffffffffffff8211171562000e385762000e3762000ddc565b5b80604052505050565b600062000e4d62000b73565b905062000e5b828262000e0b565b919050565b600067ffffffffffffffff82111562000e7e5762000e7d62000ddc565b5b62000e898262000dcb565b9050602081019050919050565b82818337600083830152505050565b600062000ebc62000eb68462000e60565b62000e41565b90508281526020810184848401111562000edb5762000eda62000dc6565b5b62000ee884828562000e96565b509392505050565b600082601f83011262000f085762000f0762000c27565b5b813562000f1a84826020860162000ea5565b91505092915050565b6000806040838503121562000f3d5762000f3c62000b7d565b5b600062000f4d8582860162000daf565b925050602083013567ffffffffffffffff81111562000f715762000f7062000b82565b5b62000f7f8582860162000ef0565b9150509250929050565b60008115159050919050565b62000fa08162000f89565b82525050565b600060208201905062000fbd600083018462000f95565b92915050565b60006020828403121562000fdc5762000fdb62000b7d565b5b600062000fec8482850162000daf565b91505092915050565b6000819050919050565b6200100a8162000ff5565b82525050565b600060208201905062001027600083018462000fff565b92915050565b6000819050919050565b600062001058620010526200104c8462000b87565b6200102d565b62000b87565b9050919050565b60006200106c8262001037565b9050919050565b600062001080826200105f565b9050919050565b620010928162001073565b82525050565b6000602082019050620010af600083018462001087565b92915050565b60008060008060808587031215620010d257620010d162000b7d565b5b600085013567ffffffffffffffff811115620010f357620010f262000b82565b5b620011018782880162000ef0565b945050602085013567ffffffffffffffff81111562001125576200112462000b82565b5b620011338782880162000ef0565b935050604085013567ffffffffffffffff81111562001157576200115662000b82565b5b620011658782880162000ef0565b9250506060620011788782880162000daf565b91505092959194509250565b600082825260208201905092915050565b7f63616c6c6572206973206e6f7420746865206f776e6572202100000000000000600082015250565b6000620011cd60198362001184565b9150620011da8262001195565b602082019050919050565b600060208201905081810360008301526200120081620011be565b9050919050565b7f656d70204944206d7573742062652076616c6964000000000000000000000000600082015250565b60006200123f60148362001184565b91506200124c8262001207565b602082019050919050565b60006020820190508181036000830152620012728162001230565b9050919050565b7f536b696c6c732063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000620012b160168362001184565b9150620012be8262001279565b602082019050919050565b60006020820190508181036000830152620012e481620012a2565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156200132157808201518184015260208101905062001304565b8381111562001331576000848401525b50505050565b60006200134482620012eb565b620013508185620012f6565b93506200136281856020860162001301565b80840191505092915050565b60006200137c828462001337565b915081905092915050565b6000819050919050565b620013a6620013a08262000ff5565b62001387565b82525050565b6000620013ba828562001391565b602082019150620013cc828462001391565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062001419828662001391565b6020820191506200142b828562001391565b6020820191506200143d828462001391565b602082019150819050949350505050565b60006200145c828462001391565b60208201915081905092915050565b620014768162000d85565b82525050565b60006200148982620012eb565b62001495818562001184565b9350620014a781856020860162001301565b620014b28162000dcb565b840191505092915050565b6000604082019050620014d460008301856200146b565b8181036020830152620014e881846200147c565b90509392505050565b60006060820190506200150860008301866200146b565b81810360208301526200151c81856200147c565b90506200152d604083018462000fff565b949350505050565b7f456d706c6f796565206e616d652063616e6e6f7420626520656d707479000000600082015250565b60006200156d601d8362001184565b91506200157a8262001535565b602082019050919050565b60006020820190508181036000830152620015a0816200155e565b9050919050565b7f456d61696c2063616e6e6f7420626520656d7074790000000000000000000000600082015250565b6000620015df60158362001184565b9150620015ec82620015a7565b602082019050919050565b600060208201905081810360008301526200161281620015d0565b9050919050565b60008160e01b9050919050565b6000620016338262001619565b9050919050565b6200164f620016498262000d85565b62001626565b82525050565b600062001663828662001337565b91506200167182856200163a565b60048201915062001683828462001337565b9150819050949350505050565b60006040820190508181036000830152620016ac81856200147c565b9050620016bd60208301846200146b565b9392505050565b600060a0820190508181036000830152620016e081886200147c565b90508181036020830152620016f681876200147c565b905081810360408301526200170c81866200147c565b90506200171d60608301856200146b565b6200172c608083018462000fff565b969550505050505056fe60806040523480156200001157600080fd5b506040518060400160405280600381526020017f454d5300000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f5446540000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000f9565b508060019080519060200190620000af929190620000f9565b50505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200020e565b8280546200010790620001d8565b90600052602060002090601f0160209004810192826200012b576000855562000177565b82601f106200014657805160ff191683800117855562000177565b8280016001018555821562000177579182015b828111156200017657825182559160200191906001019062000159565b5b5090506200018691906200018a565b5090565b5b80821115620001a55760008160009055506001016200018b565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001f157607f821691505b60208210811415620002085762000207620001a9565b5b50919050565b612f32806200021e6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637a5984c411610097578063b88d4fde11610066578063b88d4fde146102a9578063c52dc9e5146102c5578063c87b56dd146102e1578063e985e9c51461031157610100565b80637a5984c41461023757806395d89b4114610253578063a22cb46514610271578063a3d33a4d1461028d57610100565b806323b872dd116100d357806323b872dd1461019f57806342842e0e146101bb5780636352211e146101d757806370a082311461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190611ef8565b610341565b60405161012c9190611f40565b60405180910390f35b61013d610423565b60405161014a9190611ff4565b60405180910390f35b61016d6004803603810190610168919061204c565b6104b5565b60405161017a91906120ba565b60405180910390f35b61019d60048036038101906101989190612101565b6104fb565b005b6101b960048036038101906101b49190612141565b610613565b005b6101d560048036038101906101d09190612141565b610673565b005b6101f160048036038101906101ec919061204c565b610693565b6040516101fe91906120ba565b60405180910390f35b610221600480360381019061021c9190612194565b61071a565b60405161022e91906121d0565b60405180910390f35b610251600480360381019061024c9190612227565b6107d2565b005b61025b610874565b6040516102689190611ff4565b60405180910390f35b61028b60048036038101906102869190612280565b610906565b005b6102a760048036038101906102a291906123f5565b61091c565b005b6102c360048036038101906102be91906124f2565b6109d0565b005b6102df60048036038101906102da9190612575565b610a32565b005b6102fb60048036038101906102f6919061204c565b610ad6565b6040516103089190611ff4565b60405180910390f35b61032b600480360381019061032691906125d1565b610ae8565b6040516103389190611f40565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061041c575061041b82610b7c565b5b9050919050565b60606000805461043290612640565b80601f016020809104026020016040519081016040528092919081815260200182805461045e90612640565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050905090565b60006104c082610be6565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061050682610693565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e906126e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610596610c31565b73ffffffffffffffffffffffffffffffffffffffff1614806105c557506105c4816105bf610c31565b610ae8565b5b610604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fb90612776565b60405180910390fd5b61060e8383610c39565b505050565b61062461061e610c31565b82610cf2565b610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a90612808565b60405180910390fd5b61066e838383610d87565b505050565b61068e838383604051806020016040528060008152506109d0565b505050565b60008061069f83611081565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070890612874565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561078b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078290612906565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990612972565b60405180910390fd5b6108718163ffffffff166110be565b50565b60606001805461088390612640565b80601f01602080910402602001604051908101604052809291908181526020018280546108af90612640565b80156108fc5780601f106108d1576101008083540402835291602001916108fc565b820191906000526020600020905b8154815290600101906020018083116108df57829003601f168201915b5050505050905090565b610918610911610c31565b83836110ca565b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390612972565b60405180910390fd5b6109bc338263ffffffff16611237565b6109cc8163ffffffff1683611255565b5050565b6109e16109db610c31565b83610cf2565b610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1790612808565b60405180910390fd5b610a2c848484846112c9565b50505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990612972565b60405180910390fd5b610ad28263ffffffff1682611255565b5050565b6060610ae182611325565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bef81611438565b610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590612874565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610cac83610693565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610cfe83610693565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d405750610d3f8185610ae8565b5b80610d7e57508373ffffffffffffffffffffffffffffffffffffffff16610d66846104b5565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610da782610693565b73ffffffffffffffffffffffffffffffffffffffff1614610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490612a04565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6490612a96565b60405180910390fd5b610e7a8383836001611479565b8273ffffffffffffffffffffffffffffffffffffffff16610e9a82610693565b73ffffffffffffffffffffffffffffffffffffffff1614610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790612a04565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461107c8383836001611525565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6110c78161152b565b50565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611139576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113090612b02565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161122a9190611f40565b60405180910390a3505050565b61125182826040518060200160405280600081525061157e565b5050565b61125e82611438565b61129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129490612b94565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906112c4929190611da9565b505050565b6112d4848484610d87565b6112e0848484846115d9565b61131f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131690612c26565b60405180910390fd5b50505050565b606061133082610be6565b600060066000848152602001908152602001600020805461135090612640565b80601f016020809104026020016040519081016040528092919081815260200182805461137c90612640565b80156113c95780601f1061139e576101008083540402835291602001916113c9565b820191906000526020600020905b8154815290600101906020018083116113ac57829003601f168201915b5050505050905060006113da611770565b90506000815114156113f0578192505050611433565b60008251111561142557808260405160200161140d929190612c82565b60405160208183030381529060405292505050611433565b61142e84611787565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661145a83611081565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114e05750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b61151f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151690612cf2565b60405180910390fd5b50505050565b50505050565b611534816117ef565b600060066000838152602001908152602001600020805461155490612640565b90501461157b5760066000828152602001908152602001600020600061157a9190611e2f565b5b50565b611588838361193d565b61159560008484846115d9565b6115d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cb90612c26565b60405180910390fd5b505050565b60006115fa8473ffffffffffffffffffffffffffffffffffffffff16611b5b565b15611763578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611623610c31565b8786866040518563ffffffff1660e01b81526004016116459493929190612d67565b602060405180830381600087803b15801561165f57600080fd5b505af192505050801561169057506040513d601f19601f8201168201806040525081019061168d9190612dc8565b60015b611713573d80600081146116c0576040519150601f19603f3d011682016040523d82523d6000602084013e6116c5565b606091505b5060008151141561170b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170290612c26565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611768565b600190505b949350505050565b606060405180602001604052806000815250905090565b606061179282610be6565b600061179c611770565b905060008151116117bc57604051806020016040528060008152506117e7565b806117c684611b7e565b6040516020016117d7929190612c82565b6040516020818303038152906040525b915050919050565b60006117fa82610693565b905061180a816000846001611479565b61181382610693565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611939816000846001611525565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a490612e41565b60405180910390fd5b6119b681611438565b156119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed90612ead565b60405180910390fd5b611a04600083836001611479565b611a0d81611438565b15611a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4490612ead565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b57600083836001611525565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001611b8d84611c56565b01905060008167ffffffffffffffff811115611bac57611bab6122ca565b5b6040519080825280601f01601f191660200182016040528015611bde5781602001600182028036833780820191505090505b509050600082602001820190505b600115611c4b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c3557611c34612ecd565b5b0494506000851415611c4657611c4b565b611bec565b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611cb4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611caa57611ca9612ecd565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611cf1576d04ee2d6d415b85acef81000000008381611ce757611ce6612ecd565b5b0492506020810190505b662386f26fc100008310611d2057662386f26fc100008381611d1657611d15612ecd565b5b0492506010810190505b6305f5e1008310611d49576305f5e1008381611d3f57611d3e612ecd565b5b0492506008810190505b6127108310611d6e576127108381611d6457611d63612ecd565b5b0492506004810190505b60648310611d915760648381611d8757611d86612ecd565b5b0492506002810190505b600a8310611da0576001810190505b80915050919050565b828054611db590612640565b90600052602060002090601f016020900481019282611dd75760008555611e1e565b82601f10611df057805160ff1916838001178555611e1e565b82800160010185558215611e1e579182015b82811115611e1d578251825591602001919060010190611e02565b5b509050611e2b9190611e6f565b5090565b508054611e3b90612640565b6000825580601f10611e4d5750611e6c565b601f016020900490600052602060002090810190611e6b9190611e6f565b5b50565b5b80821115611e88576000816000905550600101611e70565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ed581611ea0565b8114611ee057600080fd5b50565b600081359050611ef281611ecc565b92915050565b600060208284031215611f0e57611f0d611e96565b5b6000611f1c84828501611ee3565b91505092915050565b60008115159050919050565b611f3a81611f25565b82525050565b6000602082019050611f556000830184611f31565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f95578082015181840152602081019050611f7a565b83811115611fa4576000848401525b50505050565b6000601f19601f8301169050919050565b6000611fc682611f5b565b611fd08185611f66565b9350611fe0818560208601611f77565b611fe981611faa565b840191505092915050565b6000602082019050818103600083015261200e8184611fbb565b905092915050565b6000819050919050565b61202981612016565b811461203457600080fd5b50565b60008135905061204681612020565b92915050565b60006020828403121561206257612061611e96565b5b600061207084828501612037565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120a482612079565b9050919050565b6120b481612099565b82525050565b60006020820190506120cf60008301846120ab565b92915050565b6120de81612099565b81146120e957600080fd5b50565b6000813590506120fb816120d5565b92915050565b6000806040838503121561211857612117611e96565b5b6000612126858286016120ec565b925050602061213785828601612037565b9150509250929050565b60008060006060848603121561215a57612159611e96565b5b6000612168868287016120ec565b9350506020612179868287016120ec565b925050604061218a86828701612037565b9150509250925092565b6000602082840312156121aa576121a9611e96565b5b60006121b8848285016120ec565b91505092915050565b6121ca81612016565b82525050565b60006020820190506121e560008301846121c1565b92915050565b600063ffffffff82169050919050565b612204816121eb565b811461220f57600080fd5b50565b600081359050612221816121fb565b92915050565b60006020828403121561223d5761223c611e96565b5b600061224b84828501612212565b91505092915050565b61225d81611f25565b811461226857600080fd5b50565b60008135905061227a81612254565b92915050565b6000806040838503121561229757612296611e96565b5b60006122a5858286016120ec565b92505060206122b68582860161226b565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61230282611faa565b810181811067ffffffffffffffff82111715612321576123206122ca565b5b80604052505050565b6000612334611e8c565b905061234082826122f9565b919050565b600067ffffffffffffffff8211156123605761235f6122ca565b5b61236982611faa565b9050602081019050919050565b82818337600083830152505050565b600061239861239384612345565b61232a565b9050828152602081018484840111156123b4576123b36122c5565b5b6123bf848285612376565b509392505050565b600082601f8301126123dc576123db6122c0565b5b81356123ec848260208601612385565b91505092915050565b6000806040838503121561240c5761240b611e96565b5b600083013567ffffffffffffffff81111561242a57612429611e9b565b5b612436858286016123c7565b925050602061244785828601612212565b9150509250929050565b600067ffffffffffffffff82111561246c5761246b6122ca565b5b61247582611faa565b9050602081019050919050565b600061249561249084612451565b61232a565b9050828152602081018484840111156124b1576124b06122c5565b5b6124bc848285612376565b509392505050565b600082601f8301126124d9576124d86122c0565b5b81356124e9848260208601612482565b91505092915050565b6000806000806080858703121561250c5761250b611e96565b5b600061251a878288016120ec565b945050602061252b878288016120ec565b935050604061253c87828801612037565b925050606085013567ffffffffffffffff81111561255d5761255c611e9b565b5b612569878288016124c4565b91505092959194509250565b6000806040838503121561258c5761258b611e96565b5b600061259a85828601612212565b925050602083013567ffffffffffffffff8111156125bb576125ba611e9b565b5b6125c7858286016123c7565b9150509250929050565b600080604083850312156125e8576125e7611e96565b5b60006125f6858286016120ec565b9250506020612607858286016120ec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265857607f821691505b6020821081141561266c5761266b612611565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126ce602183611f66565b91506126d982612672565b604082019050919050565b600060208201905081810360008301526126fd816126c1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612760603d83611f66565b915061276b82612704565b604082019050919050565b6000602082019050818103600083015261278f81612753565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006127f2602d83611f66565b91506127fd82612796565b604082019050919050565b60006020820190508181036000830152612821816127e5565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061285e601883611f66565b915061286982612828565b602082019050919050565b6000602082019050818103600083015261288d81612851565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006128f0602983611f66565b91506128fb82612894565b604082019050919050565b6000602082019050818103600083015261291f816128e3565b9050919050565b7f63616c6c6572206973206e6f7420746865206f776e6572202100000000000000600082015250565b600061295c601983611f66565b915061296782612926565b602082019050919050565b6000602082019050818103600083015261298b8161294f565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006129ee602583611f66565b91506129f982612992565b604082019050919050565b60006020820190508181036000830152612a1d816129e1565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a80602483611f66565b9150612a8b82612a24565b604082019050919050565b60006020820190508181036000830152612aaf81612a73565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612aec601983611f66565b9150612af782612ab6565b602082019050919050565b60006020820190508181036000830152612b1b81612adf565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612b7e602e83611f66565b9150612b8982612b22565b604082019050919050565b60006020820190508181036000830152612bad81612b71565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612c10603283611f66565b9150612c1b82612bb4565b604082019050919050565b60006020820190508181036000830152612c3f81612c03565b9050919050565b600081905092915050565b6000612c5c82611f5b565b612c668185612c46565b9350612c76818560208601611f77565b80840191505092915050565b6000612c8e8285612c51565b9150612c9a8284612c51565b91508190509392505050565b7f596f752063616e2774207472616e736665722074686973204e46540000000000600082015250565b6000612cdc601b83611f66565b9150612ce782612ca6565b602082019050919050565b60006020820190508181036000830152612d0b81612ccf565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612d3982612d12565b612d438185612d1d565b9350612d53818560208601611f77565b612d5c81611faa565b840191505092915050565b6000608082019050612d7c60008301876120ab565b612d8960208301866120ab565b612d9660408301856121c1565b8181036060830152612da88184612d2e565b905095945050505050565b600081519050612dc281611ecc565b92915050565b600060208284031215612dde57612ddd611e96565b5b6000612dec84828501612db3565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612e2b602083611f66565b9150612e3682612df5565b602082019050919050565b60006020820190508181036000830152612e5a81612e1e565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612e97601c83611f66565b9150612ea282612e61565b602082019050919050565b60006020820190508181036000830152612ec681612e8a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220010be01d87f108247e16184cf730edad903897c8bd8b8685b0b8e2cb27df740f64736f6c63430008090033a26469706673582212202903497899ec0a05ad0a9df07ec18487c896a2825e2c2b33e8f28bd9a861f09564736f6c63430008090033",
  "devdoc": {
    "author": "Anurag ",
    "details": "Employee Management Contract allows users to create employeesNFTs and manage them",
    "kind": "dev",
    "methods": {},
    "title": "EmployeeManagementContract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2668,
        "contract": "contracts/EMS.sol:EMS",
        "label": "NFT",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(EmployeeNFT)3248"
      },
      {
        "astId": 2670,
        "contract": "contracts/EMS.sol:EMS",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2672,
        "contract": "contracts/EMS.sol:EMS",
        "label": "called",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2748,
        "contract": "contracts/EMS.sol:EMS",
        "label": "employees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_struct(Employee)2685_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(EmployeeNFT)3248": {
        "encoding": "inplace",
        "label": "contract EmployeeNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_struct(Employee)2685_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct EMS.Employee)",
        "numberOfBytes": "32",
        "value": "t_struct(Employee)2685_storage"
      },
      "t_struct(Employee)2685_storage": {
        "encoding": "inplace",
        "label": "struct EMS.Employee",
        "members": [
          {
            "astId": 2674,
            "contract": "contracts/EMS.sol:EMS",
            "label": "empDetails",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2676,
            "contract": "contracts/EMS.sol:EMS",
            "label": "skillHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2679,
            "contract": "contracts/EMS.sol:EMS",
            "label": "projDetails",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2682,
            "contract": "contracts/EMS.sol:EMS",
            "label": "exists",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bool)dyn_storage"
          },
          {
            "astId": 2684,
            "contract": "contracts/EMS.sol:EMS",
            "label": "currentProject",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}